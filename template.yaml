AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Runtime: nodejs20.x
    Architectures: ['arm64']
    Environment:
      Variables:
        NODE_OPTIONS: '--enable-source-maps'
        NODE_ENV: 'production'
    EphemeralStorage:
      Size: 512
  Api:
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"
      MaxAge: 600

Resources:
  NodeModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: senmu-bff-dependencies
      Description: Node modules for Koa application
      ContentUri: layer/
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Retain

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      BinaryMediaTypes:
        - 'image/*'
        - 'multipart/form-data'
        - 'text/html'
      Auth:
        DefaultAuthorizer: NONE
      # AccessLogSetting:
      #   DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
      #   Format: '{ "requestId":"$context.requestId", "ip":"$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "path":"$context.path", "status":"$context.status", "responseLatency":"$context.responseLatency" }'
      # MethodSettings:
      #   - LoggingLevel: INFO
      #     ResourcePath: '/*'
      #     HttpMethod: '*'

  # ApiGatewayAccessLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub "/aws/apigateway/${AWS::StackName}-access-logs"
  #     RetentionInDays: 7

  # 为静态资源添加 CloudFront 分发
  StaticAssetsCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt StaticAssetsBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: '' # 简化配置，允许直接访问
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https # 强制使用 HTTPS
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          DefaultTTL: 86400 # 1天缓存
          MinTTL: 0
          MaxTTL: 31536000 # 1年最大缓存
        PriceClass: PriceClass_100 # 使用成本最低的价格等级
        HttpVersion: http2
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
  
  # S3 存储桶用于前端静态资源
  StaticAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-static-assets"
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000
  
  # S3 存储桶策略，允许公开访问
  StaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${StaticAssetsBucket}/*'

  KoajsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      SkipBuild: true
    Properties:
      Handler: lambda.handler
      CodeUri: ./dist
      MemorySize: 3008
      Timeout: 30
      Layers:
        - !Ref NodeModulesLayer
      Environment:
        Variables:
          STATIC_ASSETS_URL: !Sub "https://${StaticAssetsCDN.DomainName}"
      Policies:
        - S3CrudPolicy:
            BucketName: dms-senmu-assests
        - VPCAccessPolicy: {}
        - CloudWatchDashboardPolicy: {}
        - CloudWatchDescribeAlarmHistoryPolicy: {}
        - CloudWatchPutMetricPolicy: {}
      Events:
        RootPathEvent:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE
        StaticAssetsEvent:
          Type: Api
          Properties:
            Path: /assets/{proxy+}
            Method: GET
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE
      AutoPublishAlias: live

  ApplicationResourceGroup: # Resource Group for Application Insights
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring: # Application Insights Monitoring
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev'
  FunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt KoajsFunction.Arn
  
  StaticAssetsURL:
    Description: "URL for static assets (S3 Website URL)"
    Value: !GetAtt StaticAssetsBucket.WebsiteURL

  CloudFrontURL:
    Description: "CloudFront URL for static assets"
    Value: !Sub "https://${StaticAssetsCDN.DomainName}"
